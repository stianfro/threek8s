# Default values for threek8s
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  imageRegistry: ghcr.io
  imagePullSecrets: []

# Frontend configuration
frontend:
  enabled: true
  image:
    registry: ghcr.io
    repository: stianfro/threek8s/frontend
    tag: ""  # Uses Chart.AppVersion if not set
    pullPolicy: IfNotPresent

  replicaCount: 1

  service:
    type: ClusterIP
    port: 80
    targetPort: 80
    annotations: {}

  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}

  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}

  livenessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  readinessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1

  env:
    VITE_API_URL: "http://threek8s-backend:8080/api"
    VITE_WS_URL: "ws://threek8s-backend:8080/ws"

# Backend configuration
backend:
  enabled: true
  image:
    registry: ghcr.io
    repository: stianfro/threek8s/backend
    tag: ""  # Uses Chart.AppVersion if not set
    pullPolicy: IfNotPresent

  replicaCount: 1

  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
    annotations: {}

  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 256Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}

  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}

  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  readinessProbe:
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1

  env:
    PORT: "8080"
    NODE_ENV: "production"
    WS_HEARTBEAT_INTERVAL: "30000"
    WS_HEARTBEAT_TIMEOUT: "10000"
    CORS_ORIGINS: "http://threek8s-frontend"

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# RBAC
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["pods", "services", "endpoints", "namespaces", "nodes"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["apps"]
      resources: ["deployments", "replicasets", "statefulsets", "daemonsets"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["extensions", "networking.k8s.io"]
      resources: ["ingresses"]
      verbs: ["get", "list", "watch"]

# ConfigMap for environment variables
configMap:
  create: true
  name: ""
  data: {}

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: threek8s.local
      paths:
        - path: /
          pathType: Prefix
          service:
            name: threek8s-frontend
            port: 80
        - path: /api
          pathType: Prefix
          service:
            name: threek8s-backend
            port: 8080
        - path: /ws
          pathType: Prefix
          service:
            name: threek8s-backend
            port: 8080
  tls: []
    # - secretName: threek8s-tls
    #   hosts:
    #     - threek8s.local

# Autoscaling configuration
autoscaling:
  frontend:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  backend:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

# Pod Disruption Budget
podDisruptionBudget:
  frontend:
    enabled: false
    minAvailable: 1
  backend:
    enabled: false
    minAvailable: 1

# Network Policy
networkPolicy:
  enabled: false
  policyTypes:
    - Ingress
    - Egress
  ingress: []
  egress: []

# Persistence (for logs or cache if needed in the future)
persistence:
  enabled: false
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 1Gi

# Monitoring
monitoring:
  serviceMonitor:
    enabled: false
    labels: {}
    annotations: {}
    interval: 30s
    scrapeTimeout: 10s